@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@model List<WebApplication4.Models.BarData>

@*@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    List<WebApplication4.Models.BarData> myObjects = new List<WebApplication4.Models.BarData>();
    var c = 0;
    var TBData = ViewBag.TBBarChartData;

    var JData = ViewBag.JsonData;
    var data = JsonConvert.SerializeObject(JData);

    var SelectedChart = "Total Beneficiaries";
   

    //List<BarData> obj2 = JsonConvert.DeserializeObject<List<BarData>>(data);


    foreach(var obj in Model){
        BarData b = new BarData();

        b.total = obj.total;
        b.refugeemale = obj.refugeefemale;
        b.refugeefemale = obj.refugeefemale;
        b.female = obj.female;
        b.male = obj.male;
        myObjects.Add(b);
    }

    //JObject jObject = JObject.Parse(data);


    //var data2 = ViewBag.obj;
    //var data = JData;
    //var resultData = ViewBag.BarChartData as List<WebApplication4.Models.BarData>;
    //var modelData = Model;
}
<!-- Resources AMCHARTS 4 -->
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>

<!-- Resources AMCHARTS 5 -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/radar.js"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js" charset="utf-8"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/easy-pie-chart/2.1.6/jquery.easypiechart.min.js" charset="utf-8"></script>

<!-- Styles -->
<style>
    #chartdiv {
    /*width: 100%;*/
    height: 500px;
    }
    #main{
    /*height: 200vh;*/
    /*display: flex*/
    /*height: 200%;*/
    height: 2000px;
    /*width: 100%;*/
    /*border: 2px solid green;*/
    }
    #mainDiv {
    width: 100%;
    height: 250px;
    position: relative;
    /*border: 2px solid red;*/
    }

    #mainDiv2 {
    width: 50%;
    height: 500px;
    /*border: 2px solid yellow;*/
    /*padding-left: 10px;*/
    position: absolute;
    }

    #mainDiv3 {
    width: 50%;
    height: 500px;
    /*border: 2px solid yellow;*/
    /*padding: 10px;*/
    position: relative;
    }

    #chartdivPerLIP {
    width: 20%;
    height: 100%;
    /*top: -40px;*/
    /*position: relative;*/
    /*border-radius: 100%;*/
    border-left: 2px solid black;
    /*border: 2px solid purple;*/
    }

    #chartdivPerBSF {
    width: 20%;
    height: 100%;
    /*border-radius: 100%;*/
    border-left: 2px solid black;
    }

    #chartdivPerCBT {
    width: 20%;
    height: 100%;
    /*border-radius: 100%;*/
    border-left: 2px solid black;
    }

    #chartdivPerEBP {
    width: 20%;
    height: 100%;
    /*border-radius: 100%;*/
    border-left: 2px solid black;
    }

    #chartdivPerEBP2 {
    width: 20%;
    height: 100%;
    /*border-radius: 100%;*/
    border-left: 2px solid black;
    }

    .ib {
    display: inline-block;
    margin: -2px;
    padding: 0%;
    /*border: 1px solid blue;*/
    }

    .ib2 {
    display: inline-block;
    padding: 0%;
    /*border: 1px solid blue;*/
    }

    #guagechartdiv {
    width: 100%;
    height: 500px;
    }

    #solidguage {
    width: 100%;
    height: 500px;
    }


</style>

<!-- Button Style-->
<style>

    /* CSS */
    .button-10 {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 6px 14px;
        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', sans-serif;
        border-radius: 6px;
        border: none;
        color: #fff;
        background: linear-gradient(180deg, #4B91F7 0%, #367AF6 100%);
        background-origin: border-box;
        box-shadow: 0px 0.5px 1.5px rgba(54, 122, 246, 0.25), inset 0px 0.8px 0px -0.25px rgba(255, 255, 255, 0.2);
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
    }

    .button-10:hover {
        box-shadow: inset 0px 0.8px 0px -0.25px rgba(255, 255, 255, 0.2), 0px 0.5px 1.5px rgba(54, 122, 246, 0.25), 0px 0px 0px 3.5px rgba(58, 108, 217, 0.5);
        outline: 0;
    }
</style>

<script>
    var count1 = 0
    var count2 = 0
    var count3 = 0 
    var count4 = 0
    var count5 = 0

    var seriesList = []


</script>

<!-- Chart code -->
<script>

    var initializeData = (function () {

    var executed = false;
    console.log("one time")
    return function () {
        if (!executed) {
            executed = true;
            activateRoot1()
            }
        };
    })();
    initializeData()

    function activateRoot1(){
    am5.ready(function () {

    // Create root1 element
    // https://www.amcharts.com/docs/v5/getting-started/#Root_element
    var root1 = am5.Root.new("chartdivPerLIP");


    // Set themes
    // https://www.amcharts.com/docs/v5/concepts/themes/
    root1.setThemes([
    am5themes_Animated.new(root1)
    ]);

    // Create chart
    // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
    // start and end angle must be set both for chart and series
    var chart1 = root1.container.children.push(
        am5percent.PieChart.new(root1, {
            width: am5.percent(110),
            height: am5.percent(100),
            x: am5.percent(-10),
            layout: root1.verticalLayout
        })
    );
            

    chart1.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                console.log("Clicked", event.target.series._values.at(0))

                document.getElementById("title").innerHTML = "Livelihood Investment Plan"

                var x = document.getElementById("liptable");
                if (x.style.display === "none") {
                    x.style.display = "block";
                }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }

                var y1 = document.getElementById("cbttable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "none") {
                    a.style.display = "block";
                }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var b1 = document.getElementById("labeltablecbt");
                if (b1.style.display === "block") {
                    b1.style.display = "none";
                }

                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "none") {
                    xx.style.display = "block";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }

                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "block") {
                    z3.style.display = "none";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "block") {
                    z4.style.display = "none";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "block") {
                    zz3.style.display = "none";
                }
                

                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }

                var s = event.target.series._values.at(2);
                s.slices.template.setAll({
                    fill: am5.color(0xff300f),
                    stroke: am5.color(0xff300f)
                })      

                console.log("sfasf: ", seriesList)
               
                count2 = 0

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                seriesList[0].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[1].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });


                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

               
                var data = [{
                        "category": "Killa Abdullah",
                        "male": 22,
                        "female": 45,
                        "refugeemale": 13,
                        "refugeefemale": 13,
                        "total": 110


                    }, {
                        "category": "Killa Saifullah",
                        "male": 25,
                        "female": 45,
                        "refugeemale": 15,
                        "refugeefemale": 15,
                        "total": 85

                    }, {
                        "category": "Sherani",
                        "male": 32,
                        "female": 5,
                        "refugeemale": 13,
                        "refugeefemale": 13,
                        "total": 50

                    }, {
                        "category": "Chagai",
                        "male": 15,
                        "female": 35,
                        "refugeemale": 15,
                        "refugeefemale": 15,
                        "total": 65

                    },
                    {
                        "category": "Nushki",
                        "male": 72,
                        "female": 13,
                        "refugeemale": 25,
                        "refugeefemale": 25,
                        "total": 110

                    },
                    {
                        "category": "Pishin",
                        "male": 32,
                        "female": 24,
                        "refugeemale": 34,
                        "refugeefemale": 34,
                        "total": 90

                    },
                    {
                        "category": "Zhob",
                        "male": 53,
                        "female": 55,
                        "refugeemale": 22,
                        "refugeefemale": 22,
                        "total": 130

                    },
                    {
                        "category": "Mastung",
                        "male": 21,
                        "female": 65,
                        "refugeemale": 44,
                        "refugeefemale": 44,
                        "total": 130

                    },
                    {
                        "category": "Quetta",
                        "male": 5,
                        "female": 5,
                        "refugeemale": 9,
                        "refugeefemale": 9,
                        "total": 19

                    }]

                //root6.dispose();
                rerender(data, 0, "lip") 
            });


            // Create series
            var series3 = chart1.series.push(
                am5percent.PieSeries.new(root1, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );

            series3.data.setAll([
                {
                    category: "LIP",
                    value: 60
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "LIP {value}%",
                fontSize: 18,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                //inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(160),
                //x: am5.percent(90),
                radius: -70,
                fill: am5.color(0x000000)
            });

            // Disabling labels, ticks and toggling
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart1/#Series
            // start and end angle must be set both for chart1 and series
            var series0 = chart1.series.push(
                am5percent.PieSeries.new(root1, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            series0.labels.template.setAll({
                templateField: "settings"
            });

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            series0.labels.template.setAll({
                textType: "circular",
                radius: 30,

            });


            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart1/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: 60
                },
                {
                    category: "Unused",
                    value: 40,
                    settings: { forceHidden: true }
                }
            ]);

            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart1/#Series
            // start and end angle must be set both for chart1 and series
            var series1 = chart1.series.push(
                am5percent.PieSeries.new(root1, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                textType: "circular",
                fontSize: 12,
            });

            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / 2 - 10;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });

            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart1/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: 60
            },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 40,
                sliceSettings: { fill: am5.color(0xdedede) }
            }]);

            seriesList.push(series0);
            seriesList.push(series1);
            seriesList.push(series3);

        });

    }
  
    // end am5.ready()
</script>

<!-- Chart code -->
<script>

    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot2()
            }
        };
    })();
    initializeData()

    function activateRoot2(){

        am5.ready(function () {

            // Create root2 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root2 = am5.Root.new("chartdivPerBSF");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root2.setThemes([
                am5themes_Animated.new(root2)
            ]);

            // Create chart1
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart1/
            // start and end angle must be set both for chart2 and series
            var chart2 = root2.container.children.push(
                am5percent.PieChart.new(root2, {
                    width: am5.percent(110),
                    height: am5.percent(100),
                    x: am5.percent(-5),
                    layout: root2.verticalLayout
                })
            );

            var databsf = [{
                "category": "Killa Abdullah",
                "government": 2,
                "private": 18                

            }, {
                "category": "Killa Saifullah",
                "government": 25,
                "private": 45                
            }, {
                "category": "Sherani",
                "government": 32,
                "private": 5                
            }, {
                "category": "Chagai",
                "government": 15,
                "private": 35                
            },
            {
                "category": "Nushki",
                "government": 72,
                "private": 13                
            },
            {
                "category": "Pishin",
                "government": 32,
                "private": 24                
            },
            {
                "category": "Zhob",
                "government": 53,
                "private": 55                
            },
            {
                "category": "Mastung",
                "government": 21,
                "private": 65                
            },
            {
                "category": "Quetta",
                "government": 5,
                "private": 5                
            }]
            var databsfbar2 = [{
                "category": "Killa Abdullah",
                "newls": 2,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32

            }, {
                "category": "Killa Saifullah",
                "newls": 25,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            }, {
                "category": "Sherani",
                "newls": 32,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            }, {
                "category": "Chagai",
                "newls": 15,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            },
            {
                "category": "Nushki",
                "newls": 72,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            },
            {
                "category": "Pishin",
                "newls": 32,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            },
            {
                "category": "Zhob",
                "newls": 53,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            },
            {
                "category": "Mastung",
                "newls": 21,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            },
            {
                "category": "Quetta",
                "newls": 5,
                "rehabls": 12,
                "bothls": 35,
                "newf": 23,
                "rehabf": 13,
                "bothf": 32
            }]


            chart2.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                document.getElementById("title").innerHTML = "Business Support Facility"

                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "block") {
                    xx.style.display = "none";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "none") {
                    yy.style.display = "block";
                }


                var a = document.getElementById("labeltablelip");
                if (a.style.display === "block") {
                    a.style.display = "none";
                }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "none") {
                    b.style.display = "block";
                }

                var b1 = document.getElementById("labeltablecbt");
                if (b1.style.display === "block") {
                    b1.style.display = "none";
                }

                var x = document.getElementById("liptable");
                if (x.style.display === "block") {
                    x.style.display = "none";
                }

                var y = document.getElementById("bsftable");
                if (y.style.display === "none") {
                    y.style.display = "block";
                }
                    
                var y1 = document.getElementById("cbttable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "none") {
                    z1.style.display = "block";
                }
                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "none") {
                    z2.style.display = "block";
                }
                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "block") {
                    z3.style.display = "none";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "block") {
                    z4.style.display = "none";
                }


                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "block") {
                    zz3.style.display = "none";
                }

                console.log("Clicked", event.target._root.dom.id)
                
                console.log(`
                    seriesList: ${seriesList}
                `)

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                seriesList[3].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[4].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //if(count2 == 0){
                 
                if(root6){
                    root6.dispose()
                }
                if(root12){
                    root12.dispose()
                }
                if(root13){
                    root13.dispose()
                }

                var databsf = [{
                    "category": "Killa Abdullah",
                    "government": 2,
                    "private": 18

                }, {
                    "category": "Killa Saifullah",
                    "government": 25,
                    "private": 45
                }, {
                    "category": "Sherani",
                    "government": 32,
                    "private": 5
                }, {
                    "category": "Chagai",
                    "government": 15,
                    "private": 35
                },
                {
                    "category": "Nushki",
                    "government": 72,
                    "private": 13
                },
                {
                    "category": "Pishin",
                    "government": 32,
                    "private": 24
                },
                {
                    "category": "Zhob",
                    "government": 53,
                    "private": 55
                },
                {
                    "category": "Mastung",
                    "government": 21,
                    "private": 65
                },
                {
                    "category": "Quetta",
                    "government": 5,
                    "private": 5
                }]

                var data = [{
                        "category": "Killa Saifullah",
                        "livestock": 0,
                        "forest": 1

                    }, {
                        "category": "Nushki",
                        "livestock": 3,
                        "forest": 1
                    },
                    {
                        "category": "Pishin",
                        "livestock": 3,
                        "forest": 0
                    },
                    {
                        "category": "Zhob",
                        "livestock": 2,
                        "forest": 1
                    },
                    {
                        "category": "Mastung",
                        "livestock": 2,
                        "forest": 0
                    }]
                var databsf2 =  [{
                    "sector": "Forest",
                    "male": 0,
                    "female": 1

                }, {
                    "sector": "Mines",
                    "male": 3,
                    "female": 1
                },
                {
                    "sector": "Industry",
                    "male": 3,
                    "female": 0
                },
                {
                    "sector": "Tourism",
                    "male": 2,
                    "forest": 1
                },
                {
                    "sector": "Agriculture",
                    "male": 2,
                    "forest": 0
                }, {
                    "sector": "Livestock",
                    "male": 2,
                    "female": 0
                }]
                
                
                renderBSF(databsf)
                renderbsf1(data)
                renderbsf2(databsf2)
                //root6.dispose();
                //rerender(data) //root6 activated

            });

            // Create series
            var series3 = chart2.series.push(
                am5percent.PieSeries.new(root2, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );


            series3.data.setAll([
                {
                    category: "BSF",
                    value: 80
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "BSF {value}%",
                fontSize: 18,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(150),
                //x: am5.percent(90),
                radius: -70,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart2/#Series
            // start and end angle must be set both for chart2 and series
            var series0 = chart2.series.push(
                am5percent.PieSeries.new(root2, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            series0.labels.template.setAll({
                templateField: "settings"
            });

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            series0.labels.template.setAll({
                textType: "circular",
                radius: 30,

            });

         

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart2/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: 80
                },
                {
                    category: "Unused",
                    value: 20,
                    settings: { forceHidden: true }
                }
            ]);


            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });


            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart2/#Series
            // start and end angle must be set both for chart2 and series
            var series1 = chart2.series.push(
                am5percent.PieSeries.new(root2, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                textType: "circular"
            });

            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / 2 - 10;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });

            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart2/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: 80
            },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 20,
                sliceSettings: { fill: am5.color(0xdedede) }
            }]);

            //series1.animate({
            //    key: "startAngle",
            //    to: 180,
            //    loops: Infinity,
            //    duration: 2000,
            //    easing: am5.ease.yoyo(am5.ease.cubic)
            //});


            seriesList.push(series0);
            seriesList.push(series1);
            seriesList.push(series3);

        }); // end am5.ready()

    }
</script>

<!-- Chart code -->
<script>
    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot3()
            }
        };
    })();
    initializeData()

    function activateRoot3(){

        am5.ready(function () {

            // Create root2 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root3 = am5.Root.new("chartdivPerCBT");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root3.setThemes([
                am5themes_Animated.new(root3)
            ]);

            // Create chart2
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart2/
            // start and end angle must be set both for chart3 and series
            var chart3 = root3.container.children.push(
                am5percent.PieChart.new(root3, {
                    width: am5.percent(110),
                    height: am5.percent(100),
                    x: am5.percent(-5),
                    layout: root3.verticalLayout
                })
            );


            chart3.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                document.getElementById("title").innerHTML = "CI/CIGs"

                var x = document.getElementById("cbttable");
                if (x.style.display === "none") {
                    x.style.display = "block";
                }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }

                var y1 = document.getElementById("liptable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "block") {
                    a.style.display = "none";
                }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }

                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "none") {
                    c.style.display = "block";
                }


                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "none") {
                    xx.style.display = "block";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }
                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "block") {
                    z3.style.display = "none";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "block") {
                    z4.style.display = "none";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "none") {
                    zz3.style.display = "block";
                }

                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }
                

                console.log("Clicked", event.target._root.dom.id)

                count1 = 0;
                count2 = 0;

                console.log(`
                        count1: ${count1}
                        count2:  ${count2}
                        count3:  ${count3}
                    `)

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                seriesList[6].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[7].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                var data = [{
                        "category": "Killa Abdullah",
                        "male": 22,
                        "female": 45,
                        "refugeemale": 13,
                        "refugeefemale": 13,
                        "total": 110


                    }, {
                        "category": "Killa Saifullah",
                        "male": 25,
                        "female": 45,
                        "refugeemale": 15,
                        "refugeefemale": 15,
                        "total": 85

                    }, {
                        "category": "Sherani",
                        "male": 32,
                        "female": 5,
                        "refugeemale": 13,
                        "refugeefemale": 13,
                        "total": 50

                    }, {
                        "category": "Chagai",
                        "male": 15,
                        "female": 35,
                        "refugeemale": 15,
                        "refugeefemale": 15,
                        "total": 65

                    },
                    {
                        "category": "Nushki",
                        "male": 72,
                        "female": 13,
                        "refugeemale": 25,
                        "refugeefemale": 25,
                        "total": 110

                    },
                    {
                        "category": "Pishin",
                        "male": 32,
                        "female": 24,
                        "refugeemale": 34,
                        "refugeefemale": 34,
                        "total": 90

                    },
                    {
                        "category": "Zhob",
                        "male": 53,
                        "female": 55,
                        "refugeemale": 22,
                        "refugeefemale": 22,
                        "total": 130

                    },
                    {
                        "category": "Mastung",
                        "male": 21,
                        "female": 65,
                        "refugeemale": 44,
                        "refugeefemale": 44,
                        "total": 130

                    },
                    {
                        "category": "Quetta",
                        "male": 5,
                        "female": 5,
                        "refugeemale": 9,
                        "refugeefemale": 9,
                        "total": 19

                    }]

                //root6.dispose();
                rerender(data, 0, "cbt") //root6 activated
                rerendercbt(data)
            });


            // Create series
            var series3 = chart3.series.push(
                am5percent.PieSeries.new(root3, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );

            series3.data.setAll([
                {
                    category: "CI/CIGs",
                    value: 30
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "CI/CIGs {value}%",
                fontSize: 18,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(150),
                //x: am5.percent(90),
                radius: -90,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart3/#Series
            // start and end angle must be set both for chart3 and series
            var series0 = chart3.series.push(
                am5percent.PieSeries.new(root3, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            series0.labels.template.setAll({
                templateField: "settings"
            });

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            series0.labels.template.setAll({
                textType: "circular",
                radius: 30,

            });         


            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart3/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: 30
                },
                {
                    category: "Unused",
                    value: 70,
                    settings: { forceHidden: true }
                }
            ]);


            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });


            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart3/#Series
            // start and end angle must be set both for chart3 and series
            var series1 = chart3.series.push(
                am5percent.PieSeries.new(root3, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                textType: "circular"
            });

            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / 2 - 10;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });

            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart3/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: 30
            },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 70,
                sliceSettings: { fill: am5.color(0xdedede) }
            }]);

            seriesList.push(series0);
            seriesList.push(series1);
            seriesList.push(series3);


        }); // end am5.ready()

    }

</script>


<!-- Chart code -->
<script>

    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot5()
            }
        };
    })();
    initializeData()

    function activateRoot5() {
        am5.ready(function () {

            // Create root5 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root5 = am5.Root.new("chartdivPerEBP2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root5.setThemes([
                am5themes_Animated.new(root5)
            ]);

            // Create chart5
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart5/
            // start and end angle must be set both for chart5 and series
            var chart5 = root5.container.children.push(
                am5percent.PieChart.new(root5, {
                    width: am5.percent(110),
                    height: am5.percent(100),
                    x: am5.percent(-5),
                    layout: root5.verticalLayout
                })
            );

           
            var datatvt1 = [{
                "category": "Mobile Repairing",
                "male": 0,
                "female": 1

            }, {
                "category": "Motor Bike Engine Tuning",
                "male": 3,
                "female": 1
            },
            {
                "category": "Motor Winding",
                "male": 3,
                "female": 0
            },
            {
                "category": "Solar Panel",
                "male": 2,
                "female": 1
            },
            {
                "category": "Tailring",
                "male": 2,
                "female": 0
            }]
            var datatvt2 = [{
                "category": "Mobile Repairing",
                "male": 0,
                "female": 1

            }, {
                "category": "Motor Bike Engine Tuning",
                "male": 3,
                "female": 1
            },
            {
                "category": "Motor Winding",
                "male": 3,
                "female": 0
            },
            {
                "category": "Solar Panel",
                "male": 2,
                "female": 1
            },
            {
                "category": "Tailring",
                "male": 2,
                "female": 0
            }]
           
            rendertvt1(datatvt1)
            rendertvt2(datatvt2)



            chart5.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                console.log("Clicked>>>", event.target._root.dom.id)


                document.getElementById("title").innerHTML = "Technical And Vocational Trainings"

                var x = document.getElementById("liptable");
                if (x.style.display === "none") {
                    x.style.display = "block";
                }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }

                var y1 = document.getElementById("cbttable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "none") {
                    a.style.display = "block";
                }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "block") {
                    c.style.display = "none";
                }

                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "none") {
                    xx.style.display = "block";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }
                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "none") {
                    z3.style.display = "block";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "none") {
                    z4.style.display = "block";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "block") {
                    zz3.style.display = "none";
                }

                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }


                count1 = 0;
                count2 = 0;

                console.log(`
                                    count1: ${count1}
                                    count2:  ${count2}
                                    count3:  ${count3}
                                `)

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                

                seriesList[9].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[10].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });


                //if (count3 == 0) {

                var data = [{
                    "category": "Killa Abdullah",
                    "male": 22,
                    "female": 45,
                    "refugeemale": 13,
                    "refugeefemale": 13,
                    "total": 110


                }, {
                    "category": "Killa Saifullah",
                    "male": 25,
                    "female": 45,
                    "refugeemale": 15,
                    "refugeefemale": 15,
                    "total": 85

                }, {
                    "category": "Sherani",
                    "male": 32,
                    "female": 5,
                    "refugeemale": 13,
                    "refugeefemale": 13,
                    "total": 50

                }, {
                    "category": "Chagai",
                    "male": 15,
                    "female": 35,
                    "refugeemale": 15,
                    "refugeefemale": 15,
                    "total": 65

                },
                {
                    "category": "Nushki",
                    "male": 72,
                    "female": 13,
                    "refugeemale": 25,
                    "refugeefemale": 25,
                    "total": 110

                },
                {
                    "category": "Pishin",
                    "male": 32,
                    "female": 24,
                    "refugeemale": 34,
                    "refugeefemale": 34,
                    "total": 90

                },
                {
                    "category": "Zhob",
                    "male": 53,
                    "female": 55,
                    "refugeemale": 22,
                    "refugeefemale": 22,
                    "total": 130

                },
                {
                    "category": "Mastung",
                    "male": 21,
                    "female": 65,
                    "refugeemale": 44,
                    "refugeefemale": 44,
                    "total": 130

                },
                {
                    "category": "Quetta",
                    "male": 5,
                    "female": 5,
                    "refugeemale": 9,
                    "refugeefemale": 9,
                    "total": 19

                }]

                //root6.dispose();
                rerender(data, 0, "tvt") //root6 activated

                //    count3 = 1

                //    am5.array.each(am5.registry.rootElements, function (root) {

                //        console.log("ROOT: ", root.dom.id)
                //        if (root.dom.id == "solidguage" || root.dom.id == "chartdiv") {
                //            console.log("yes")
                //        }
                //        else {
                //            rootArray.push(root)
                //        }
                //    });

                //    console.log("ARRAY: ", rootArray)
                //    console.log(`
                //                        1:  ${rootArray[0].isDisposed()}
                //                        2:  ${rootArray[1].isDisposed()}
                //                        3:  ${rootArray[2].isDisposed()}
                //                        4:  ${rootArray[3].isDisposed()}
                //                        5:  ${rootArray[4].isDisposed()}
                //                    `)

                //    rootArray[0].dispose()
                //    rootArray[1].dispose()
                //    //rootArray[2].dispose()
                //    rootArray[3].dispose()
                //    rootArray[4].dispose()


                //    activateRoot1()
                //    activateRoot2()
                //    //activateRoot3()
                //    activateRoot4()
                //    activateRoot5()

                //    //rootArray = []

                //    am5.array.each(am5.registry.rootElements, function (root) {

                //        console.log("ROOT: ", root.dom.id)
                //        if (root.dom.id == "solidguage" || root.dom.id == "chartdiv") {
                //            console.log("yes")
                //        }
                //        else {
                //            rootArray.push(root)
                //        }
                //    });

                //    console.log(`
                //            1:  ${rootArray[0].isDisposed()}
                //            2:  ${rootArray[1].isDisposed()}
                //            3:  ${rootArray[2].isDisposed()}
                //            4:  ${rootArray[3].isDisposed()}
                //            5:  ${rootArray[4].isDisposed()}
                //        `)

                //    // Configuring slices
                //    series0.slices.template.setAll({
                //        fill: am5.color(0xff300f),
                //        stroke: am5.color(0xff300f)
                //    })
                //    series1.slices.template.setAll({
                //        fill: am5.color(0xff300f),
                //        stroke: am5.color(0xff300f)
                //    })
                //}

            });


            // Create series
            var series3 = chart5.series.push(
                am5percent.PieSeries.new(root5, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );


            series3.data.setAll([
                {
                    category: "TVT",
                    value: 90
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "TVT {value}%",
                fontSize: 18,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(150),
                //x: am5.percent(90),
                radius: -70,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart5/#Series
            // start and end angle must be set both for chart5 and series
            var series0 = chart5.series.push(
                am5percent.PieSeries.new(root5, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            series0.labels.template.setAll({
                templateField: "settings"
            });

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            series0.labels.template.setAll({
                textType: "circular",
                radius: 30,

            });


            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart5/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: 90,
                    //settings: { fill: am5.color(0x540099) }
                },
                {
                    category: "Unused",
                    value: 10,
                    //settings: { fill: am5.color(0x540099) }
                    settings: { forceHidden: true }
                }
            ]);



            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart5/#Series
            // start and end angle must be set both for chart5 and series
            var series1 = chart5.series.push(
                am5percent.PieSeries.new(root5, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                textType: "circular",
                fill: am5.color(0xffffff),
            });

            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / 2 - 10;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });


            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart5/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: 90,
                //sliceSettings: { fill: am5.color(0x540099) }
            },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 10,
                //sliceSettings: { fill: am5.color(0xdedede) }
                sliceSettings: { fill: am5.color(0xe6b3e6) }
            }]);

            seriesList.push(series0)
            seriesList.push(series1)
            seriesList.push(series3)

        }); // end am5.ready()

    }
</script>


<!-- Chart code -->
<script>

    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot4()
            }
        };
    })();
    initializeData()

    function activateRoot4(){

        am5.ready(function () {

            // Create root4 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root4 = am5.Root.new("chartdivPerEBP");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root4.setThemes([
                am5themes_Animated.new(root4)
            ]);

            // Create chart4
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart4/
            // start and end angle must be set both for chart4 and series
            var chart4 = root4.container.children.push(
                am5percent.PieChart.new(root4, {
                    width: am5.percent(110),
                    height: am5.percent(100),
                    x: am5.percent(-5),
                    layout: root4.verticalLayout
                })
            );



            chart4.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

  

                document.getElementById("title").innerHTML = "Enterprise Development Program"

                var x = document.getElementById("liptable");
                if (x.style.display === "none") {
                    x.style.display = "block";
                }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }
                
                var y1 = document.getElementById("cbttable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "none") {
                    a.style.display = "block";
                }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "block") {
                    c.style.display = "none";
                }

                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "none") {
                    xx.style.display = "block";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }
                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "block") {
                    z3.style.display = "none";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "block") {
                    z4.style.display = "none";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "block") {
                    zz3.style.display = "none";
                }

                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }
              
                

                console.log("Clicked", event.target._root.dom.id)

                count1 = 0;
                count2 = 0;

                console.log(`
                            count1: ${count1}
                            count2:  ${count2}
                            count3:  ${count3}
                           
                        `)
                console.log("Series: ", seriesList)

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                seriesList[12].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[13].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });


                //if (count3 == 0) {

                var data = [{
                        "category": "Killa Abdullah",
                        "male": 22,
                        "female": 45,
                        "refugeemale": 13,
                        "refugeefemale": 13,
                        "total": 110


                    }, {
                        "category": "Killa Saifullah",
                        "male": 25,
                        "female": 45,
                        "refugeemale": 15,
                        "refugeefemale": 15,
                        "total": 85

                    }, {
                        "category": "Sherani",
                        "male": 32,
                        "female": 5,
                        "refugeemale": 13,
                        "refugeefemale": 13,
                        "total": 50

                    }, {
                        "category": "Chagai",
                        "male": 15,
                        "female": 35,
                        "refugeemale": 15,
                        "refugeefemale": 15,
                        "total": 65

                    },
                    {
                        "category": "Nushki",
                        "male": 72,
                        "female": 13,
                        "refugeemale": 25,
                        "refugeefemale": 25,
                        "total": 110

                    },
                    {
                        "category": "Pishin",
                        "male": 32,
                        "female": 24,
                        "refugeemale": 34,
                        "refugeefemale": 34,
                        "total": 90

                    },
                    {
                        "category": "Zhob",
                        "male": 53,
                        "female": 55,
                        "refugeemale": 22,
                        "refugeefemale": 22,
                        "total": 130

                    },
                    {
                        "category": "Mastung",
                        "male": 21,
                        "female": 65,
                        "refugeemale": 44,
                        "refugeefemale": 44,
                        "total": 130

                    },
                    {
                        "category": "Quetta",
                        "male": 5,
                        "female": 5,
                        "refugeemale": 9,
                        "refugeefemale": 9,
                        "total": 19

                    }]

                //root6.dispose();
                rerender(data, 0, "edp") //root6 activated

                //    count3 = 1

                //    am5.array.each(am5.registry.rootElements, function (root) {

                //        console.log("ROOT: ", root.dom.id)
                //        if (root.dom.id == "solidguage" || root.dom.id == "chartdiv") {
                //            console.log("yes")
                //        }
                //        else {
                //            rootArray.push(root)
                //        }
                //    });

                //    console.log("ARRAY: ", rootArray)
                //    console.log(`
                //                        1:  ${rootArray[0].isDisposed()}
                //                        2:  ${rootArray[1].isDisposed()}
                //                        3:  ${rootArray[2].isDisposed()}
                //                        4:  ${rootArray[3].isDisposed()}
                //                        5:  ${rootArray[4].isDisposed()}
                //                    `)

                //    rootArray[0].dispose()
                //    rootArray[1].dispose()
                //    //rootArray[2].dispose()
                //    rootArray[3].dispose()
                //    rootArray[4].dispose()


                //    activateRoot1()
                //    activateRoot2()
                //    //activateRoot3()
                //    activateRoot4()
                //    activateRoot5()

                //    //rootArray = []

                //    am5.array.each(am5.registry.rootElements, function (root) {

                //        console.log("ROOT: ", root.dom.id)
                //        if (root.dom.id == "solidguage" || root.dom.id == "chartdiv") {
                //            console.log("yes")
                //        }
                //        else {
                //            rootArray.push(root)
                //        }
                //    });

                //    console.log(`
                //            1:  ${rootArray[0].isDisposed()}
                //            2:  ${rootArray[1].isDisposed()}
                //            3:  ${rootArray[2].isDisposed()}
                //            4:  ${rootArray[3].isDisposed()}
                //            5:  ${rootArray[4].isDisposed()}
                //        `)

                //    // Configuring slices
                //    series0.slices.template.setAll({
                //        fill: am5.color(0x87ad20),
                //        stroke: am5.color(0x87ad20)
                //    })
                //    series1.slices.template.setAll({
                //        fill: am5.color(0x87ad20),
                //        stroke: am5.color(0x87ad20)
                //    })
                //}

            });


            // Create series
            var series3 = chart4.series.push(
                am5percent.PieSeries.new(root4, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );


            series3.data.setAll([
                {
                    category: "EDP",
                    value: 19
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "EDP {value}%",
                fontSize: 18,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(150),
                //x: am5.percent(90),
                radius: -70,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart4/#Series
            // start and end angle must be set both for chart4 and series
            var series0 = chart4.series.push(
                am5percent.PieSeries.new(root4, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            series0.labels.template.setAll({
                templateField: "settings"
            });

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            series0.labels.template.setAll({
                textType: "circular",
                radius: 30,

            });

            //series0.bullets.push(function () {
            //    return am5.Bullet.new(root4, {
            //        sprite: am5.Label.new(root4, {
            //            //text: "LIPs",
            //            centerX: am5.percent(50),
            //            centerY: am5.percent(130),
            //            populateText: true,
            //            //fill: am5.color(0xffffff)
            //        })
            //    });
            //});



            //series0.labels.template.setAll({
            //text: "EBP {value}%",
            //fontSize: 20,
            //textType: "circular",
            //textAlign: "center",
            ////oversizedBehavior: "wrap",
            //inside: false,
            ////centerX: am5.percent(-90),
            //centerY: am5.percent(-170),
            ////x: am5.percent(90),
            //radius: -150,
            ////fill: am5.color(0xffffff)
            //});


            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart4/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: 19
                },
                {
                    category: "Unused",
                    value: 81,
                    settings: { forceHidden: true }
                }
            ]);



            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });


            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart4/#Series
            // start and end angle must be set both for chart4 and series
            var series1 = chart4.series.push(
                am5percent.PieSeries.new(root4, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                textType: "circular"
            });

            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / 2 - 10;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });


            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart4/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: 19
            },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 81,
                sliceSettings: { fill: am5.color(0xdedede) }
            }]);

            seriesList.push(series0)
            seriesList.push(series1)
            seriesList.push(series3)

        }); // end am5.ready()

    }

</script>


@*<a asp-controller="Home" asp-action="Index" class="btn btn-primary">Index</a>*@
<!-- Chart code -->
<script>
    var allLegends
    var root6

    var jobj = [
        @{foreach (var m in TBData)
            {
                <text>{
                    'category':'@m.category',
                    'male':@m.male,
                    'female':@m.female,
                    'refugeemale':@m.refugeemale,
                    'refugeefemale':@m.refugeefemale,
                    'total':@m.total
                }, </text>
            }
        }
        ];

       
    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                rerender(jobj)
            }
        };
    })();
    initializeData()

    function rerender(data, button, whichChart){
        var newData = data
        var chartTitle = "Total Beneficiaries"
        if(whichChart == "cbt"){
            chartTitle = "Total Number Of (CI/CIGs)"
        }
        if (whichChart == "lip") {
            chartTitle = "Livelihood Investment Plan"
        } 
        if (whichChart == "tvt") {
            chartTitle = "Technical Vocational Trainings"
        }
        if (whichChart == "edp") {
            chartTitle = "Enterprise Development Program"
        }
        console.log("Data: ", data)
        console.log("Button: ", button)
        console.log("WhichChart: ", whichChart)
        console.log("title: ", chartTitle)

        if(button == 1){
            document.getElementById("title").innerHTML = "Total Beneficiaries"
            chartTitle = "Total Beneficiaries"

            var x = document.getElementById("liptable");
            if (x.style.display === "none") {
                x.style.display = "block";
            }

            var y = document.getElementById("bsftable");
            if (y.style.display === "block") {
                y.style.display = "none";
            }

            var y1 = document.getElementById("cbttable");
            if (y1.style.display === "block") {
                y1.style.display = "none";
            }

            var a = document.getElementById("labeltablelip");
            if (a.style.display === "none") {
                a.style.display = "block";
            }

            var b = document.getElementById("labeltablebsf");
            if (b.style.display === "block") {
                b.style.display = "none";
            }
            var b1 = document.getElementById("labeltablecbt");
            if (b1.style.display === "block") {
                b1.style.display = "none";
            }

            var xx = document.getElementById("chartdiv");
            if (xx.style.display === "none") {
                xx.style.display = "block";
            }

            var yy = document.getElementById("chartdiv2");
            if (yy.style.display === "block") {
                yy.style.display = "none";
            }

            var z1 = document.getElementById("chartdivbsf1");
            if (z1.style.display === "block") {
                z1.style.display = "none";
            }
            var z2 = document.getElementById("chartdivbsf2");
            if (z2.style.display === "block") {
                z2.style.display = "none";
            }
            var z3 = document.getElementById("chartdivtvt1");
            if (z3.style.display === "block") {
                z3.style.display = "none";
            }
            var z4 = document.getElementById("chartdivtvt2");
            if (z4.style.display === "block") {
                z4.style.display = "none";
            }
            

            var zz3 = document.getElementById("cbtChartDiv2");
            if (zz3.style.display === "block") {
                zz3.style.display = "none";
            }


            if(root6){
                root6.dispose()
            }
            if(root11){
                root11.dispose()
            }
        }
      
        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root6 = am5.Root.new("chartdiv");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root6.setThemes([
                am5themes_Animated.new(root6)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart6 = root6.container.children.push(am5xy.XYChart.new(root6, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root6.verticalLayout

            }));
            chart6.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart6.children.unshift(am5.Label.new(root6, {
                text: chartTitle,
                fontSize: 22,
                fontWeight: "500",
                fill: chart6.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                //y: am5.percent(0),
                centerX: am5.percent(-5),
                paddingTop: -20,
                //paddingBottom: 30
            }));
          

            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/axes/
            var yRenderer = am5xy.AxisRendererY.new(root6, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart6.yAxes.push(am5xy.CategoryAxis.new(root6, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root6, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(data);

            var xAxis = chart6.xAxes.push(am5xy.ValueAxis.new(root6, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root6, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/legend-xy-series/
            var legend = chart6.children.push(am5.Legend.new(root6, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart6.series.push(am5xy.ColumnSeries.new(root6, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category",
                    clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                if (name.includes("CI")) {
                    console.log("CI")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else if (name.includes("CIG")) {
                    console.log("CIG")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else {
                    series.columns.template.setAll({
                        tooltipText: "{name}, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root6, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root6, {
                            text: "{valueX}",
                            fill: root6.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                legend.itemContainers.template.events.on("click", function (item) {

                    console.log("item", item.target)
                    var right = item.target._localBounds.right
                    
                    console.log("right: ", right)
                    console.log("Includes: ", item.target.uid)
                    // item: 100, 122, 144, 166
                    // series: 85, 107, 129, 151
                    var series1 = chart6.series.getIndex(0);
                    var series2 = chart6.series.getIndex(1);
                    var series3 = chart6.series.getIndex(2);
                    var series4 = chart6.series.getIndex(3);

                    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                    var boundsInit = [122.75] //122.75
                    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                    var boundsTB = [207.3203125, 102.1640625]//102.1640625
                    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                    var boundsLIP = [184.8203125]//122.75
                    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                    var boundsCBT = [152.4765625, 113.140625]//113.140625
                    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                    var boundsEBP = [121.6328125, 121.6328125]//121.6328125

                    

                    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                        console.log("init")
                        if (series1.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series2.hide();
                        }
                        else {
                            console.log("Hidden", series1.isHidden())
                            if (series1.isHidden()) {
                                // series1.show();
                            }
                            series2.show()
                        }
                        //series1.show()

                        series3.hide()
                        series4.hide()
                    }

                    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                        console.log("TB")
                        if (series2.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series1.hide();
                        }
                        else {
                            console.log("Hidden", series2.isHidden())
                            if (series2.isHidden()) {
                                // series1.show();
                            }
                            series1.show()
                        }
                        //series1.show()

                        series3.hide()
                        series4.hide()
                    }

                    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                        console.log("LIP")
                        if (series3.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series4.hide();
                        }
                        else {
                            console.log("Hidden", series3.isHidden())
                            if (series3.isHidden()) {
                                // series1.show();
                            }
                            series4.show()
                        }
                        //series1.show()

                        series1.hide()
                        series2.hide()
                    }

                    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                        console.log("CBT")
                        if (series4.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series3.hide();
                        }
                        else {
                            console.log("Hidden", series4.isHidden())
                            if (series4.isHidden()) {
                                // series1.show();
                            }
                            series3.show()
                        }
                        //series1.show()

                        series1.hide()
                        series2.hide()
                    }

                });

                legend.data.push(series);


                allLegends = legend.allChildren()
                console.log(" All LEGEND: ", allLegends)
                allLegends[0].hide()
                if (allLegends[2]) {
                    allLegends[2].hide()
                }

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            if(whichChart == "cbt"){
                makeSeries("Male", "male", true, true);
                makeSeries("CI", "female", true, true);
                makeSeries("Male", "refugeemale", true, false);
                makeSeries("CIG", "refugeefemale", true, false);
                makeSeries("Total", "total", false, false);

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "block") {
                    a.style.display = "none";
                }
                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "none") {
                    c.style.display = "block";
                }

                

            }
            else{
                makeSeries("Male", "male", true, true);
                makeSeries("Host Community", "female", true, true)
                makeSeries("Refugee Male", "refugeemale", true, false)
                makeSeries("Refugees", "refugeefemale", true, false)
                makeSeries("Total", "total", false, false)
            }
            //makeSeries("Europe", "europe", false);
            //makeSeries("North America", "namerica", true);
            //makeSeries("Asia", "asia", false);
            //makeSeries("Latin America", "lamerica", true);
            //makeSeries("Middle East", "meast", true);
            //makeSeries("Africa", "africa", true);


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart6.appear(1000, 100);

        }); // end am5.ready()


    }
   
    function clicked(e) {
        console.log("Clicked", e)

        data = [{
            "category": "Killa Abdullah",
            "male": 22,
            "female": 45,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 110


        }, {
            "category": "Killa Saifullah",
            "male": 25,
            "female": 45,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 85

        }, {
            "category": "Sherani",
            "male": 32,
            "female": 5,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 50

        }, {
            "category": "Chagai",
            "male": 15,
            "female": 35,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 65

        },
        {
            "category": "Nushki",
            "male": 72,
            "female": 13,
            "refugeemale": 25,
            "refugeefemale": 25,
            "total": 110

        },
        {
            "category": "Pishin",
            "male": 32,
            "female": 24,
            "refugeemale": 34,
            "refugeefemale": 34,
            "total": 90

        },
        {
            "category": "Zhob",
            "male": 53,
            "female": 55,
            "refugeemale": 22,
            "refugeefemale": 22,
            "total": 130

        },
        {
            "category": "Mastung",
            "male": 21,
            "female": 65,
            "refugeemale": 44,
            "refugeefemale": 44,
            "total": 130

        },
        {
            "category": "Quetta",
            "male": 5,
            "female": 5,
            "refugeemale": 9,
            "refugeefemale": 9,
            "total": 19

        }]

        root.dispose();
        rerender(data)
        //columnStart(barData)
    }

</script>


@*<a asp-controller="Home" asp-action="Index" class="btn btn-primary">Index</a>*@
<!-- Chart code -->
<script>
    var allLegends
    var root11

    var jobj = [
    @{
        foreach (var m in TBData)
        {
            <text>{
                    'category': '@m.category',
                    'male': @m.male,
                    'female': @m.female,
                    'refugeemale': @m.refugeemale,
                    'refugeefemale': @m.refugeefemale,
                    'total': @m.total
                            }, </text>
        }
    }
            ];

    function renderBSF(data, button) {
        var newData = data
        console.log("Data: ", data)
        console.log("Button: ", button)

        if (button == 1) {
            document.getElementById("title").innerHTML = "Total Beneficiaries"
            root6.dispose()
        }
        //root6.dispose()
        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root11 = am5.Root.new("chartdiv2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root11.setThemes([
                am5themes_Animated.new(root11)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart11 = root11.container.children.push(am5xy.XYChart.new(root11, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root11.verticalLayout

            }));
            chart11.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart11.children.unshift(am5.Label.new(root11, {
                text: "BSF (Government & Private)",
                fontSize: 22,
                fontWeight: "500",
                fill: chart11.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                //y: am5.percent(0),
                centerX: am5.percent(-5),
                paddingTop: -20,
                //paddingBottom: 30
            }));



            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart11/axes/
            var yRenderer = am5xy.AxisRendererY.new(root11, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart11.yAxes.push(am5xy.CategoryAxis.new(root11, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root11, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(data);

            var xAxis = chart11.xAxes.push(am5xy.ValueAxis.new(root11, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root11, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart11/legend-xy-series/
            var legend = chart11.children.push(am5.Legend.new(root11, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart11/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart11.series.push(am5xy.ColumnSeries.new(root11, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category",
                    clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                if (name.includes("Host Community")) {
                    console.log("Host Community")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else if (name.includes("Refugees")) {
                    console.log("Refugees")
                    series.columns.template.setAll({
                        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else {
                    series.columns.template.setAll({
                        tooltipText: "{name}, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root11, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root11, {
                            text: "{valueX}",
                            fill: root11.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });


                legend.itemContainers.template.events.on("click", function (item) {

                    console.log("item", item.target)
                    var right = item.target._localBounds.right

                    console.log("right: ", right)
                    console.log("Includes: ", item.target.uid)
                    // item: 100, 122, 144, 166
                    // series: 85, 107, 129, 151
                    var series1 = chart11.series.getIndex(0);
                    var series2 = chart11.series.getIndex(1);
                    var series3 = chart11.series.getIndex(2);
                    var series4 = chart11.series.getIndex(3);

                    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                    var boundsInit = [122.75]
                    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                    var boundsTB = [207.3203125]//184.94775390625
                    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                    var boundsLIP = [184.8203125]
                    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                    var boundsCBT = [152.4765625]
                    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                    var boundsEBP = [121.6328125]
                 
                });

                legend.data.push(series);
               

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Government", "government", false, false);
            makeSeries("Private", "private", false, false);          


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart11.appear(1000, 100);

        }); // end am5.ready()


    }

    function clicked(e) {
        console.log("Clicked", e)

        data = [{
            "category": "Killa Abdullah",
            "male": 22,
            "female": 45,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 110


        }, {
            "category": "Killa Saifullah",
            "male": 25,
            "female": 45,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 85

        }, {
            "category": "Sherani",
            "male": 32,
            "female": 5,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 50

        }, {
            "category": "Chagai",
            "male": 15,
            "female": 35,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 65

        },
        {
            "category": "Nushki",
            "male": 72,
            "female": 13,
            "refugeemale": 25,
            "refugeefemale": 25,
            "total": 110

        },
        {
            "category": "Pishin",
            "male": 32,
            "female": 24,
            "refugeemale": 34,
            "refugeefemale": 34,
            "total": 90

        },
        {
            "category": "Zhob",
            "male": 53,
            "female": 55,
            "refugeemale": 22,
            "refugeefemale": 22,
            "total": 130

        },
        {
            "category": "Mastung",
            "male": 21,
            "female": 65,
            "refugeemale": 44,
            "refugeefemale": 44,
            "total": 130

        },
        {
            "category": "Quetta",
            "male": 5,
            "female": 5,
            "refugeemale": 9,
            "refugeefemale": 9,
            "total": 19

        }]

        root.dispose();
        rerender(data)
        //columnStart(barData)
    }


</script>



@*          BSF
    SECOND ROW TWO CHART
*@


<!-- Chart code -->
<script>
    var allLegends
    var root12

    var jobj = [
    @{
        foreach (var m in TBData)
        {
            <text>{
                    'category': '@m.category',
                    'male': @m.male,
                    'female': @m.female,
                    'refugeemale': @m.refugeemale,
                    'refugeefemale': @m.refugeefemale,
                    'total': @m.total
                            }, </text>
        }
    }
            ];

    //console.log("JOBJ: ", jobj)
    //console.log("OBJ: ", data)

    function renderbsf1(data, button) {
        var newData = data
        console.log("Data BSF: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root12 = am5.Root.new("chartdivbsf1");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root12.setThemes([
                am5themes_Animated.new(root12)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart12 = root12.container.children.push(am5xy.XYChart.new(root12, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root12.verticalLayout

            }));
            chart12.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart12.children.unshift(am5.Label.new(root12, {
                text: "Business Support Facility (Government)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart12.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));


            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart12/axes/
            var yRenderer = am5xy.AxisRendererY.new(root12, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart12.yAxes.push(am5xy.CategoryAxis.new(root12, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root12, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart12.xAxes.push(am5xy.ValueAxis.new(root12, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root12, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart12/legend-xy-series/
            var legend = chart12.children.push(am5.Legend.new(root12, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart12/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart12.series.push(am5xy.ColumnSeries.new(root12, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

                //if (name.includes("Host Community")) {
                //    console.log("Host Community")
                //    series.columns.template.setAll({
                //        tooltipText: "Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else if (name.includes("Refugees")) {
                //    console.log("Refugees")
                //    series.columns.template.setAll({
                //        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else {
                //    series.columns.template.setAll({
                //        tooltipText: "{name}, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root12, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root12, {
                            text: "{valueX}",
                            fill: root12.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                //legend.itemContainers.template.events.on("click", function (item) {

                //    console.log("item", item.target)
                //    var right = item.target._localBounds.right

                //    console.log("right: ", right)
                //    console.log("Includes: ", item.target.uid)
                //    // item: 100, 122, 144, 166
                //    // series: 85, 107, 129, 151
                //    var series1 = chart12.series.getIndex(0);
                //    var series2 = chart12.series.getIndex(1);
                //    var series3 = chart12.series.getIndex(2);
                //    var series4 = chart12.series.getIndex(3);

                //    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                //    var boundsInit = [122.75]
                //    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                //    var boundsTB = [207.3203125]//184.94775390625
                //    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                //    var boundsLIP = [184.8203125]
                //    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                //    var boundsCBT = [152.4765625]
                //    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                //    var boundsEBP = [121.6328125]



                //    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                //        console.log("init")
                //        if (series1.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series2.hide();
                //        }
                //        else {
                //            console.log("Hidden", series1.isHidden())
                //            if (series1.isHidden()) {
                //                // series1.show();
                //            }
                //            series2.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                //        console.log("TB")
                //        if (series2.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series1.hide();
                //        }
                //        else {
                //            console.log("Hidden", series2.isHidden())
                //            if (series2.isHidden()) {
                //                // series1.show();
                //            }
                //            series1.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                //        console.log("LIP")
                //        if (series3.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series4.hide();
                //        }
                //        else {
                //            console.log("Hidden", series3.isHidden())
                //            if (series3.isHidden()) {
                //                // series1.show();
                //            }
                //            series4.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                //        console.log("CBT")
                //        if (series4.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series3.hide();
                //        }
                //        else {
                //            console.log("Hidden", series4.isHidden())
                //            if (series4.isHidden()) {
                //                // series1.show();
                //            }
                //            series3.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //});

                legend.data.push(series);


                //allLegends = legend.allChildren()
                //console.log(" All LEGEND: ", allLegends)
                //allLegends[0].hide()
                //if (allLegends[2]) {
                //    allLegends[2].hide()
                //}

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Livestock", "livestock", false, false);
            makeSeries("Forest", "forest", false, false)

            //makeSeries("New", "newls", true, true);
            //makeSeries("Rehab", "rehabls", true, true)
            //makeSeries("Both", "bothls", true, false)
            //makeSeries("New", "newf", true, true);
            //makeSeries("Rehab", "rehabf", true, true)
            //makeSeries("Both", "bothf", true, false)

            //makeSeries("Europe", "europe", false);
            //makeSeries("North America", "namerica", true);
            //makeSeries("Asia", "asia", false);
            //makeSeries("Latin America", "lamerica", true);
            //makeSeries("Middle East", "meast", true);
            //makeSeries("Africa", "africa", true);


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart12.appear(1000, 100);

        }); // end am5.ready()


    }

</script>

<!-- Chart code -->
<script>
    var allLegends
    var root13

    var jobj = [
    @{
        foreach (var m in TBData)
        {
            <text>{
                    'category': '@m.category',
                    'male': @m.male,
                    'female': @m.female,
                    'refugeemale': @m.refugeemale,
                    'refugeefemale': @m.refugeefemale,
                    'total': @m.total
                                        }, </text>
        }
    }
                ];

    //console.log("JOBJ: ", jobj)
    //console.log("OBJ: ", data)

    function renderbsf2(data, button) {
        var newData = data
        console.log("Data BSF: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root13 = am5.Root.new("chartdivbsf2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root13.setThemes([
                am5themes_Animated.new(root13)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart13 = root13.container.children.push(am5xy.XYChart.new(root13, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root13.verticalLayout

            }));
            chart13.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart13.children.unshift(am5.Label.new(root13, {
                text: "Business Support Facility (Private)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart13.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));

            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart13/axes/
            var yRenderer = am5xy.AxisRendererY.new(root13, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart13.yAxes.push(am5xy.CategoryAxis.new(root13, {
                categoryField: "sector",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root13, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart13.xAxes.push(am5xy.ValueAxis.new(root13, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root13, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart13/legend-xy-series/
            var legend = chart13.children.push(am5.Legend.new(root13, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart13/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart13.series.push(am5xy.ColumnSeries.new(root13, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "sector"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

                //if (name.includes("Host Community")) {
                //    console.log("Host Community")
                //    series.columns.template.setAll({
                //        tooltipText: "Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else if (name.includes("Refugees")) {
                //    console.log("Refugees")
                //    series.columns.template.setAll({
                //        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else {
                //    series.columns.template.setAll({
                //        tooltipText: "{name}, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root13, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root13, {
                            text: "{valueX}",
                            fill: root13.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                //legend.itemContainers.template.events.on("click", function (item) {

                //    console.log("item", item.target)
                //    var right = item.target._localBounds.right

                //    console.log("right: ", right)
                //    console.log("Includes: ", item.target.uid)
                //    // item: 100, 122, 144, 166
                //    // series: 85, 107, 129, 151
                //    var series1 = chart13.series.getIndex(0);
                //    var series2 = chart13.series.getIndex(1);
                //    var series3 = chart13.series.getIndex(2);
                //    var series4 = chart13.series.getIndex(3);

                //    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                //    var boundsInit = [122.75]
                //    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                //    var boundsTB = [207.3203125]//184.94775390625
                //    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                //    var boundsLIP = [184.8203125]
                //    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                //    var boundsCBT = [152.4765625]
                //    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                //    var boundsEBP = [121.6328125]



                //    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                //        console.log("init")
                //        if (series1.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series2.hide();
                //        }
                //        else {
                //            console.log("Hidden", series1.isHidden())
                //            if (series1.isHidden()) {
                //                // series1.show();
                //            }
                //            series2.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                //        console.log("TB")
                //        if (series2.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series1.hide();
                //        }
                //        else {
                //            console.log("Hidden", series2.isHidden())
                //            if (series2.isHidden()) {
                //                // series1.show();
                //            }
                //            series1.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                //        console.log("LIP")
                //        if (series3.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series4.hide();
                //        }
                //        else {
                //            console.log("Hidden", series3.isHidden())
                //            if (series3.isHidden()) {
                //                // series1.show();
                //            }
                //            series4.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                //        console.log("CBT")
                //        if (series4.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series3.hide();
                //        }
                //        else {
                //            console.log("Hidden", series4.isHidden())
                //            if (series4.isHidden()) {
                //                // series1.show();
                //            }
                //            series3.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //});

                legend.data.push(series);


                //allLegends = legend.allChildren()
                //console.log(" All LEGEND: ", allLegends)
                //allLegends[0].hide()
                //if (allLegends[2]) {
                //    allLegends[2].hide()
                //}

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart13.appear(1000, 100);

        }); // end am5.ready()
    }

</script>


@*          BSF
    SECOND ROW TWO CHARTS END.........
*@



@*          TVT
    SECOND ROW TWO CHART
*@


<!-- Chart code -->
<script>
    var allLegends
    var root15

    var jobj = [
    @{
        foreach (var m in TBData)
        {
            <text>{
                    'category': '@m.category',
                    'male': @m.male,
                    'female': @m.female,
                    'refugeemale': @m.refugeemale,
                    'refugeefemale': @m.refugeefemale,
                    'total': @m.total
                                        }, </text>
        }
    }
                ];


    function rendertvt1(data, button) {
        var newData = data
        console.log("Data TVT: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root15 = am5.Root.new("chartdivtvt1");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root15.setThemes([
                am5themes_Animated.new(root15)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart15 = root15.container.children.push(am5xy.XYChart.new(root15, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root15.verticalLayout

            }));
            chart15.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart15.children.unshift(am5.Label.new(root15, {
                text: "Technical And Vocational Trainings (Refugees)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart15.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(10),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));


            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart15/axes/
            var yRenderer = am5xy.AxisRendererY.new(root15, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart15.yAxes.push(am5xy.CategoryAxis.new(root15, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root15, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart15.xAxes.push(am5xy.ValueAxis.new(root15, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root15, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart15/legend-xy-series/
            var legend = chart15.children.push(am5.Legend.new(root15, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart15/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart15.series.push(am5xy.ColumnSeries.new(root15, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category"                   
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

              
                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root15, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root15, {
                            text: "{valueX}",
                            fill: root15.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });

                legend.data.push(series);


                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)
         

            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart15.appear(1000, 100);

        }); // end am5.ready()


    }

</script>

<!-- Chart code -->
<script>
    var allLegends
    var root16

    var jobj = [
    @{
        foreach (var m in TBData)
        {
            <text>{
                    'category': '@m.category',
                    'male': @m.male,
                    'female': @m.female,
                    'refugeemale': @m.refugeemale,
                    'refugeefemale': @m.refugeefemale,
                    'total': @m.total
                                                    }, </text>
        }
    }
                    ];

    //console.log("JOBJ: ", jobj)
    //console.log("OBJ: ", data)

    function rendertvt2(data, button) {
        var newData = data
        console.log("Data BSF: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root16 = am5.Root.new("chartdivtvt2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root16.setThemes([
                am5themes_Animated.new(root16)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart16 = root16.container.children.push(am5xy.XYChart.new(root16, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root16.verticalLayout

            }));
            chart16.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);


            chart16.children.unshift(am5.Label.new(root16, {
                text: "Technical And Vocational Trainings (Host)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart16.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));


            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart16/axes/
            var yRenderer = am5xy.AxisRendererY.new(root16, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart16.yAxes.push(am5xy.CategoryAxis.new(root16, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root16, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart16.xAxes.push(am5xy.ValueAxis.new(root16, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root16, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart16/legend-xy-series/
            var legend = chart16.children.push(am5.Legend.new(root16, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart16/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart16.series.push(am5xy.ColumnSeries.new(root16, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

                //if (name.includes("Host Community")) {
                //    console.log("Host Community")
                //    series.columns.template.setAll({
                //        tooltipText: "Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else if (name.includes("Refugees")) {
                //    console.log("Refugees")
                //    series.columns.template.setAll({
                //        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else {
                //    series.columns.template.setAll({
                //        tooltipText: "{name}, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root16, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root16, {
                            text: "{valueX}",
                            fill: root16.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                //legend.itemContainers.template.events.on("click", function (item) {

                //    console.log("item", item.target)
                //    var right = item.target._localBounds.right

                //    console.log("right: ", right)
                //    console.log("Includes: ", item.target.uid)
                //    // item: 100, 122, 144, 166
                //    // series: 85, 107, 129, 151
                //    var series1 = chart16.series.getIndex(0);
                //    var series2 = chart16.series.getIndex(1);
                //    var series3 = chart16.series.getIndex(2);
                //    var series4 = chart16.series.getIndex(3);

                //    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                //    var boundsInit = [122.75]
                //    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                //    var boundsTB = [207.3203125]//184.94775390625
                //    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                //    var boundsLIP = [184.8203125]
                //    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                //    var boundsCBT = [152.4765625]
                //    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                //    var boundsEBP = [121.6328125]



                //    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                //        console.log("init")
                //        if (series1.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series2.hide();
                //        }
                //        else {
                //            console.log("Hidden", series1.isHidden())
                //            if (series1.isHidden()) {
                //                // series1.show();
                //            }
                //            series2.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                //        console.log("TB")
                //        if (series2.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series1.hide();
                //        }
                //        else {
                //            console.log("Hidden", series2.isHidden())
                //            if (series2.isHidden()) {
                //                // series1.show();
                //            }
                //            series1.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                //        console.log("LIP")
                //        if (series3.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series4.hide();
                //        }
                //        else {
                //            console.log("Hidden", series3.isHidden())
                //            if (series3.isHidden()) {
                //                // series1.show();
                //            }
                //            series4.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                //        console.log("CBT")
                //        if (series4.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series3.hide();
                //        }
                //        else {
                //            console.log("Hidden", series4.isHidden())
                //            if (series4.isHidden()) {
                //                // series1.show();
                //            }
                //            series3.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //});

                legend.data.push(series);


                //allLegends = legend.allChildren()
                //console.log(" All LEGEND: ", allLegends)
                //allLegends[0].hide()
                //if (allLegends[2]) {
                //    allLegends[2].hide()
                //}

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart16.appear(1000, 100);

        }); // end am5.ready()
    }

</script>


@*          TVT
    SECOND ROW TWO CHARTS END.........
*@



@*          CBT
    CBT MAIN CHART CI/CIGs
*@


<!-- Chart code -->
<script>
    var allLegends
    var root14
    var data = [{
        "category": "Killa Abdullah",
        "male": 22,
        "female": 45,
        "refugeemale": 13,
        "refugeefemale": 13,
        "total": 110


    }, {
        "category": "Killa Saifullah",
        "male": 25,
        "female": 45,
        "refugeemale": 15,
        "refugeefemale": 15,
        "total": 85

    }, {
        "category": "Sherani",
        "male": 32,
        "female": 5,
        "refugeemale": 13,
        "refugeefemale": 13,
        "total": 50

    }, {
        "category": "Chagai",
        "male": 15,
        "female": 35,
        "refugeemale": 15,
        "refugeefemale": 15,
        "total": 65

    },
    {
        "category": "Nushki",
        "male": 72,
        "female": 13,
        "refugeemale": 25,
        "refugeefemale": 25,
        "total": 110

    },
    {
        "category": "Pishin",
        "male": 32,
        "female": 24,
        "refugeemale": 34,
        "refugeefemale": 34,
        "total": 90

    },
    {
        "category": "Zhob",
        "male": 53,
        "female": 55,
        "refugeemale": 22,
        "refugeefemale": 22,
        "total": 130

    },
    {
        "category": "Mastung",
        "male": 21,
        "female": 65,
        "refugeemale": 44,
        "refugeefemale": 44,
        "total": 130

    },
    {
        "category": "Quetta",
        "male": 5,
        "female": 5,
        "refugeemale": 9,
        "refugeefemale": 9,
        "total": 19

    }]


    var jobj = [
    @{
        foreach (var m in TBData)
        {
            <text>{
                    'category': '@m.category',
                    'male': @m.male,
                    'female': @m.female,
                    'refugeemale': @m.refugeemale,
                    'refugeefemale': @m.refugeefemale,
                    'total': @m.total
                            }, </text>
        }
    }
            ];


    function rerendercbt(data, button, whichChart) {
        var newData = data
        console.log("Data: ", data)
        console.log("Button: ", button)
        console.log("WhichChart: ", whichChart)

        if (button == 1) {
            document.getElementById("title").innerHTML = "Total Beneficiaries"

            var x = document.getElementById("liptable");
            if (x.style.display === "none") {
                x.style.display = "block";
            }

            var y = document.getElementById("bsftable");
            if (y.style.display === "block") {
                y.style.display = "none";
            }

            var y1 = document.getElementById("cbttable");
            if (y1.style.display === "block") {
                y1.style.display = "none";
            }

            var a = document.getElementById("labeltablelip");
            if (a.style.display === "none") {
                a.style.display = "block";
            }

            var b = document.getElementById("labeltablebsf");
            if (b.style.display === "block") {
                b.style.display = "none";
            }
            var b1 = document.getElementById("labeltablecbt");
            if (b1.style.display === "block") {
                b1.style.display = "none";
            }

            var xx = document.getElementById("chartdiv");
            if (xx.style.display === "none") {
                xx.style.display = "block";
            }

            var yy = document.getElementById("chartdiv2");
            if (yy.style.display === "block") {
                yy.style.display = "none";
            }

            var z1 = document.getElementById("chartdivbsf1");
            if (z1.style.display === "block") {
                z1.style.display = "none";
            }
            var z2 = document.getElementById("chartdivbsf2");
            if (z2.style.display === "block") {
                z2.style.display = "none";
            }



            if (root6) {
                root6.dispose()
            }
            if (root11) {
                root11.dispose()
            }
        }

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root14 = am5.Root.new("chartdivcbt2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root14.setThemes([
                am5themes_Animated.new(root14)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart14 = root14.container.children.push(am5xy.XYChart.new(root14, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root14.verticalLayout

            }));
            chart14.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart14.children.unshift(am5.Label.new(root14, {
                text: "Total Beneficiaries (CI/CIGs)",
                fontSize: 20,
                fontWeight: "500",
                fill: chart14.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));


            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart14/axes/
            var yRenderer = am5xy.AxisRendererY.new(root14, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart14.yAxes.push(am5xy.CategoryAxis.new(root14, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root14, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart14.xAxes.push(am5xy.ValueAxis.new(root14, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root14, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart14/legend-xy-series/
            var legend = chart14.children.push(am5.Legend.new(root14, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart14/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart14.series.push(am5xy.ColumnSeries.new(root14, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category",
                    clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                if (name.includes("CI")) {
                    console.log("CI")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else if (name.includes("CIG")) {
                    console.log("CIG")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else {
                    series.columns.template.setAll({
                        tooltipText: "{name}, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root14, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root14, {
                            text: "{valueX}",
                            fill: root14.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                legend.itemContainers.template.events.on("click", function (item) {

                    console.log("item", item.target)
                    var right = item.target._localBounds.right

                    console.log("right: ", right)
                    console.log("Includes: ", item.target.uid)
                    // item: 100, 122, 144, 166
                    // series: 85, 107, 129, 151
                    var series1 = chart14.series.getIndex(0);
                    var series2 = chart14.series.getIndex(1);
                    var series3 = chart14.series.getIndex(2);
                    var series4 = chart14.series.getIndex(3);

                    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                    var boundsInit = [122.75] //122.75
                    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                    var boundsTB = [207.3203125, 102.1640625]//102.1640625
                    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                    var boundsLIP = [184.8203125]//122.75
                    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                    var boundsCBT = [152.4765625, 113.140625]//113.140625
                    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                    var boundsEBP = [121.6328125, 121.6328125]//121.6328125



                    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                        console.log("init")
                        if (series1.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series2.hide();
                        }
                        else {
                            console.log("Hidden", series1.isHidden())
                            if (series1.isHidden()) {
                                // series1.show();
                            }
                            series2.show()
                        }
                        //series1.show()

                        series3.hide()
                        series4.hide()
                    }

                    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                        console.log("TB")
                        if (series2.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series1.hide();
                        }
                        else {
                            console.log("Hidden", series2.isHidden())
                            if (series2.isHidden()) {
                                // series1.show();
                            }
                            series1.show()
                        }
                        //series1.show()

                        series3.hide()
                        series4.hide()
                    }

                    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                        console.log("LIP")
                        if (series3.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series4.hide();
                        }
                        else {
                            console.log("Hidden", series3.isHidden())
                            if (series3.isHidden()) {
                                // series1.show();
                            }
                            series4.show()
                        }
                        //series1.show()

                        series1.hide()
                        series2.hide()
                    }

                    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                        console.log("CBT")
                        if (series4.get("visible")) {
                            console.log("Visible")
                            //series1.hide();
                            series3.hide();
                        }
                        else {
                            console.log("Hidden", series4.isHidden())
                            if (series4.isHidden()) {
                                // series1.show();
                            }
                            series3.show()
                        }
                        //series1.show()

                        series1.hide()
                        series2.hide()
                    }

                });

                legend.data.push(series);


                allLegends = legend.allChildren()
                console.log(" All LEGEND: ", allLegends)
                allLegends[0].hide()
                if (allLegends[2]) {
                    allLegends[2].hide()
                }

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            //if (whichChart == "cbt") {
                makeSeries("Male", "male", true, true);
                makeSeries("CI", "female", true, true);
                makeSeries("Male", "refugeemale", true, false);
                makeSeries("CIG", "refugeefemale", true, false);
                makeSeries("Total", "total", false, false);

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "block") {
                    a.style.display = "none";
                }
                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "none") {
                    c.style.display = "block";
                }



            //}
            //else {
            //    makeSeries("Male", "male", true, true);
            //    makeSeries("Host Community", "female", true, true)
            //    makeSeries("Refugee Male", "refugeemale", true, false)
            //    makeSeries("Refugees", "refugeefemale", true, false)
            //    makeSeries("Total", "total", false, false)
            //}
            //makeSeries("Europe", "europe", false);
            //makeSeries("North America", "namerica", true);
            //makeSeries("Asia", "asia", false);
            //makeSeries("Latin America", "lamerica", true);
            //makeSeries("Middle East", "meast", true);
            //makeSeries("Africa", "africa", true);


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart14.appear(1000, 100);

        }); // end am5.ready()


    }


</script>

@*               CBT
        CBT MAIN CHART CI/CIGs ENDS...........
*@

@*      GUAGE CHART TOTAL PROJECT PROGRESS
             GUAGECHART START
*@

<!-- Chart code -->
<script>
    am4core.ready(function () {

        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end

        // create chart7
        var chart7 = am4core.create("guagechartdiv", am4charts.GaugeChart);
        chart7.innerRadius = am4core.percent(82);

        /**
         * Normal axis
         */

        var axis = chart7.xAxes.push(new am4charts.ValueAxis());
        axis.min = 0;
        axis.max = 100;
        axis.strictMinMax = true;
        axis.renderer.radius = am4core.percent(80);
        axis.renderer.inside = true;
        axis.renderer.line.strokeOpacity = 1;
        axis.renderer.ticks.template.disabled = false
        axis.renderer.ticks.template.strokeOpacity = 1;
        axis.renderer.ticks.template.length = 10;
        axis.renderer.grid.template.disabled = true;
        axis.renderer.labels.template.radius = 40;
        axis.renderer.labels.template.adapter.add("text", function (text) {
            return text + "%";
        })

        /**
         * Axis for ranges
         */

        var colorSet = new am4core.ColorSet();

        var axis2 = chart7.xAxes.push(new am4charts.ValueAxis());
        axis2.min = 0;
        axis2.max = 100;
        axis2.strictMinMax = true;
        axis2.renderer.labels.template.disabled = true;
        axis2.renderer.ticks.template.disabled = true;
        axis2.renderer.grid.template.disabled = true;

        var range0 = axis2.axisRanges.create();
        range0.value = 0;
        range0.endValue = 50;
        range0.axisFill.fillOpacity = 1;
        range0.axisFill.fill = colorSet.getIndex(0);

        var range1 = axis2.axisRanges.create();
        range1.value = 50;
        range1.endValue = 100;
        range1.axisFill.fillOpacity = 1;
        range1.axisFill.fill = colorSet.getIndex(2);

        /**
         * Label
         */

        var label = chart7.radarContainer.createChild(am4core.Label);
        label.isMeasured = false;
        label.fontSize = 40;
        label.x = am4core.percent(50);
        label.y = am4core.percent(100);
        label.horizontalCenter = "middle";
        label.verticalCenter = "bottom";
        label.text = "50%";

        // Add chart title
        var title = chart7.titles.create();
        title.text = "Project Progress";
        title.fontSize = 25;
        title.marginBottom = -50;
        title.fill = colorSet.getIndex(2);


        /**
         * Hand
         */

        var hand = chart7.hands.push(new am4charts.ClockHand());
        hand.axis = axis2;
        hand.innerRadius = am4core.percent(20);
        hand.startWidth = 10;
        hand.pin.disabled = true;
        hand.value = 50;

        hand.events.on("propertychanged", function (ev) {
            range0.endValue = ev.target.value;
            range1.value = ev.target.value;
            label.text = axis2.positionToValue(hand.currentPosition).toFixed(0);
            axis2.invalidate();
        });

        setInterval(function () {
            var value = 77;
            var animation = new am4core.Animation(hand, {
                property: "value",
                to: value
            }, 1000, am4core.ease.cubicOut).start();
        }, 2000);

    }); // end am4core.ready()
</script>

@*          GUAGE CHART TOTAL PROJECT PROGRESS
                    GUAGE CHART ENDs.............
*@

@*              OTHER INTERVENTION CHART
                        STARTS...............
*@

<!-- Chart code -->
<script>
    am5.ready(function () {

        // Create root7 element
        // https://www.amcharts.com/docs/v5/getting-started/#Root_element
        var root7 = am5.Root.new("solidguage");

        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root7.setThemes([
            am5themes_Animated.new(root7)
        ]);

        // Create chart7
        // https://www.amcharts.com/docs/v5/charts/radar-chart8/
        var chart8 = root7.container.children.push(am5radar.RadarChart.new(root7, {
            panX: false,
            panY: false,
            wheelX: "panX",
            wheelY: "zoomX",
            innerRadius: am5.percent(20),
            startAngle: -90,
            endAngle: 180
        }));

        chart8.children.unshift(am5.Label.new(root7, {
            text: "This is a chart title",
            fontSize: 25,
            fontWeight: "500",
            fill: chart8.get("colors").getIndex(1),
            textAlign: "center",
            x: am5.percent(50),
            centerX: am5.percent(120),
            paddingTop: 0,
            paddingBottom: 30
        }));

        // Data
        var data = [{
            category: "Trained LF",
            value: 80,
            full: 100,
            columnSettings: {
                fill: chart8.get("colors").getIndex(0)
            }
        }, {
            category: "Trained TRP",
            value: 35,
            full: 100,
            columnSettings: {
                fill: chart8.get("colors").getIndex(1)
            }
        }, {
            category: "Individual Businesses",
            value: 92,
            full: 100,
            columnSettings: {
                fill: chart8.get("colors").getIndex(2)
            }
        }, {
            category: "Value Chain Studies",
            value: 68,
            full: 100,
            columnSettings: {
                fill: chart8.get("colors").getIndex(3)
            }
        }];

        // Add cursor
        // https://www.amcharts.com/docs/v5/charts/radar-chart8/#Cursor
        var cursor = chart8.set("cursor", am5radar.RadarCursor.new(root7, {
            behavior: "zoomX"
        }));

        cursor.lineY.set("visible", false);

        // Create axes and their renderers
        // https://www.amcharts.com/docs/v5/charts/radar-chart8/#Adding_axes
        var xRenderer = am5radar.AxisRendererCircular.new(root7, {
            //minGridDistance: 50
        });

        xRenderer.labels.template.setAll({
            radius: 10
        });

        xRenderer.grid.template.setAll({
            forceHidden: true
        });

        var xAxis = chart8.xAxes.push(am5xy.ValueAxis.new(root7, {
            renderer: xRenderer,
            min: 0,
            max: 100,
            strictMinMax: true,
            numberFormat: "#'%'",
            tooltip: am5.Tooltip.new(root7, {})
        }));


        var yRenderer = am5radar.AxisRendererRadial.new(root7, {
            minGridDistance: 20
        });

        yRenderer.labels.template.setAll({
            centerX: am5.p100,
            fontWeight: "500",
            fontSize: 18,
            templateField: "columnSettings"
        });

        yRenderer.grid.template.setAll({
            forceHidden: true
        });

        var yAxis = chart8.yAxes.push(am5xy.CategoryAxis.new(root7, {
            categoryField: "category",
            renderer: yRenderer
        }));

        yAxis.data.setAll(data);


        // Create series
        // https://www.amcharts.com/docs/v5/charts/radar-chart8/#Adding_series
        var series1 = chart8.series.push(am5radar.RadarColumnSeries.new(root7, {
            xAxis: xAxis,
            yAxis: yAxis,
            clustered: false,
            valueXField: "full",
            categoryYField: "category",
            fill: root7.interfaceColors.get("alternativeBackground")
        }));

        series1.columns.template.setAll({
            width: am5.p100,
            fillOpacity: 0.08,
            strokeOpacity: 0,
            cornerRadius: 20
        });

        series1.data.setAll(data);


        var series2 = chart8.series.push(am5radar.RadarColumnSeries.new(root7, {
            xAxis: xAxis,
            yAxis: yAxis,
            clustered: false,
            valueXField: "value",
            categoryYField: "category"
        }));

        series2.columns.template.setAll({
            width: am5.p100,
            strokeOpacity: 0,
            tooltipText: "{category}: {valueX}%",
            cornerRadius: 20,
            templateField: "columnSettings"
        });

        series2.data.setAll(data);

        // Animate chart8 and series in
        // https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation
        series1.appear(1000);
        series2.appear(1000);
        chart8.appear(1000, 100);

    }); // end am5.ready()
</script>

@*              OTHER INTERVENTION CHART
                        ENDS...............
*@

<!-- HTML -->
<div id="main">
   
 
    <div id="mainDiv" style="border:2px solid black">
       
        <div class="ib" id="chartdivPerLIP" style="cursor: pointer;"></div>
        @*<div class="vr" style="height: 220px; width:4px; background-color:purple"></div>*@
        
        <div class="ib" id="chartdivPerBSF" style="cursor: pointer;"></div>
        @*<div class="vr" style="height: 220px; width:4px; background-color:purple"></div>*@
        <div class="ib" id="chartdivPerCBT" style="cursor: pointer;" ></div>
        
        @*<div class="vr" style="height: 220px; width:4px; background-color:purple"></div>*@
        <div class="ib" id="chartdivPerEBP2" style="cursor: pointer;" ></div>

        @*<div class="vr" style="height: 220px; width:4px; background-color:purple"></div>*@
        <div class="ib" id="chartdivPerEBP" style="cursor: pointer;" ></div>
        <div class="container" style="border-left:2px solid black; border-right: 2px solid black; border-bottom: 2px solid black;">

            <div class="row">
                <div class="col-lg-4">
                    <!-- HTML !-->
                    <button class="button-10" role="button" onclick="rerender(jobj, 1)" style="margin-top: 15px;">Total Beneficiaries</button>
                  
                    <p id="title" style="font-size:25px; font-weight:500; color:#6794DC">Total Beneficiaries</p>                   

                </div>
                <div class="col-lg-8">
                    <div class="table-responsive-sm">
                        <table class="table" id="labeltablelip" style="display:block">
                            <thead>
                                <tr>
                                    <th colspan="10">
                                        <p style="font-size:20px; font-weight:500; color:#6794DC">Labels</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#a367dc"></div>
                                    </td>
                                    <td style="font-size:15px">Total</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#67b7dc"></div>
                                    </td>
                                    <td>Host Male</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#6794dc"></div>
                                    </td>
                                    <td>Host Female</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#6771dc"></div>
                                    </td>
                                    <td>Refugee Male</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#866fdd"></div>
                                    </td>
                                    <td>Refugee Female</td>
                                </tr>                                                                
                            </tbody>

                        </table>
                        <table class="table" id="labeltablebsf" style="display:none">
                            <thead>
                                <tr>
                                    <th colspan="10">
                                        <p style="font-size:20px; font-weight:500; color:#6794DC">Color Labels</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#a367dc"></div>
                                    </td>
                                    <td style="font-size:15px">Government</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#67b7dc"></div>
                                    </td>
                                    <td>Private</td>                                   
                                </tr>
                            </tbody>

                        </table>
                        <table class="table" id="labeltablecbt" style="display:none">
                            <thead>
                                <tr>
                                    <th colspan="10">
                                        <p style="font-size:20px; font-weight:500; color:#6794DC">Color Labels</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#a367dc"></div>
                                    </td>
                                    <td style="font-size:15px">Total</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#67b7dc"></div>
                                    </td>
                                    <td>CI Male</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#6794dc"></div>
                                    </td>
                                    <td>CI Female</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#6771dc"></div>
                                    </td>
                                    <td>CIG Male</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#866fdd"></div>
                                    </td>
                                    <td>CIG Female</td>
                                </tr>
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>
            <div class="row">               

                <div class="col-lg-4" style="border-right: 2px solid black">
                   @* <div class="card" style="width:100%; cursor: pointer;" onclick="clicked('tb')">
                        <div class="card-body">
                            <h5 class="card-title">Total Beneficiaries</h5>
                            <p class="card-text">Numbers: 60000</p>
                            <p class="card-text">Percentage: 100%</p>
                           
                        </div>
                    </div>*@

                    <table id="liptable" class="table table-bordered table-striped" style="width:100%; display:block">
                    <thead>
                        <tr>
                            <th>
                                District
                            </th>
                            <th>
                                Male
                            </th>
                            <th>
                                Female
                            </th>
                            <th>
                                Refugees
                            </th>

                            <th>
                                Total
                            </th>
                        </tr>                        
                    </thead>
                    <tbody>  
                    @foreach(var obj in TBData)
                    {                    
                        <tr>
                            <td width="50%">
                                @obj.category
                            </td>
                            <td width="50%">
                                @obj.male
                            </td>
                            <td width="50%">
                                @obj.female
                            </td>
                             <td width="50%">
                                        @{
                                            c = obj.refugeemale + obj.refugeefemale;                                            
                                        }
                                        @c
                            </td>
                           
                            <td width="50%">
                                @obj.total
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                   
                    <table id="bsftable" class="table table-bordered table-striped" style="width:100%; display:none">
                        <thead>
                            <tr>
                                <th>
                                    District
                                </th>
                                <th>
                                    Government
                                </th>
                                <th>
                                    Private
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var obj in TBData)
                            {
                                <tr>
                                    <td width="50%">
                                        @obj.category
                                    </td>
                                    <td width="50%">
                                        @obj.male
                                    </td>
                                    <td width="50%">
                                        @obj.female
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <table id="cbttable" class="table table-bordered table-striped" style="width:100%; display:none">
                        <thead>
                            <tr>
                                <th colspan="3" style="text-align: center;">Training Events</th>
                            </tr>
                            <tr>
                                <th>
                                    District
                                </th>
                                <th>
                                    Male
                                </th>
                                <th>
                                    Female
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var obj in TBData)
                            {
                                <tr>
                                    <td width="50%">
                                        @obj.category
                                    </td>
                                    <td width="50%">
                                        @obj.male
                                    </td>
                                    <td width="50%">
                                        @obj.female
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
               
                <div class="col-lg-8" id="chartdiv" style="display:block"></div>
                <div class="col-lg-8" id="chartdiv2" style="display:none; height:500px"></div>
                
            </div>

            <div class="row">                            
                <div class="col-lg-6" style="border-right: 2px solid black">                  
                    <div id="chartdivbsf1" style="display:none; height:500px"></div>
                </div>

                <div class="col-lg-6" style="border-right: 2px solid black">
                    <div id="chartdivbsf2" style="display:none; height:500px"></div>
                </div>                
            </div>

            <div class="row">
                <div class="col-lg-6" style="border-right: 2px solid black">
                    <div id="chartdivtvt1" style="display:none; height:500px"></div>
                </div>

                <div class="col-lg-6" style="border-right: 2px solid black">
                    <div id="chartdivtvt2" style="display:none; height:500px"></div>
                </div>
            </div>

            <div class="row" id="cbtChartDiv2" style="display:none; border-right: 2px solid black">
                <div id="chartdivcbt2" style="height:500px"></div>
            </div>

        </div>

        <div class="ib2" id="mainDiv3">
            <div  style="border-bottom: 2px solid black; border-right: 2px solid black; border-left: 2px solid black;" id="solidguage"></div>
        </div>
        <div class="ib2" id="mainDiv2" >
            <div style="border-bottom: 2px solid black; border-right: 2px solid black; " id="guagechartdiv"></div>           
        </div>
     
    </div>
    
</div>




@*
    
                <div class="col-lg-2 ">
                    <div class="card" style="width:100%; cursor: pointer;" onclick="clicked('tb')">
                        <div class="card-body">
                            <h5 class="card-title">Total Beneficiaries</h5>
                            <p class="card-text">Numbers: 60000</p>
                            <p class="card-text">Percentage: 100%</p>
                            @*<a href="#" class="btn btn-primary">Go somewhere</a>
                        </div>
                    </div>
                    <div class="card" style="width:100%; cursor: pointer;" onclick="clicked('lip')">
                        <div class="card-body">
                            <h5 class="card-title">LIPs</h5>
                            <p class="card-text">Numbers: 2000</p>
                            <p class="card-text">Percentage: 100%</p>
                            @*<a href="#" class="btn btn-primary">Go somewhere</a>
                        </div>
                    </div>
                    <div class="card" style="width:100%; cursor: pointer;" onclick="clicked('cbt')">
                        <div class="card-body">
                            <h5 class="card-title">CBT</h5>
                            <p class="card-text">Numbers: 1000</p>
                            <p class="card-text">Percentage: 100%</p>
                            @*<a href="#" class="btn btn-primary">Go somewhere</a>
                        </div>
                    </div>
                    <div class="card" style="width:100%; cursor: pointer;" onclick="clicked('ebp')">
                        <div class="card-body">
                            <h5 class="card-title">EBP</h5>
                            <p class="card-text">Numbers: 500</p>
                            <p class="card-text">Percentage: 100%</p>
                            @*<a href="#" class="btn btn-primary">Go somewhere</a>
                        </div>
                    </div>
                </div>

*@